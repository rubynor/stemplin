<%= render RubyUI::Dialog.new(open: true, data: { controller: "custom-dialog" }) do %>
  <%= render RubyUI::DialogTrigger.new(class: "hidden", data: { custom_dialog_target: "trigger" }) do %>
    <%= render RubyUI::Button.new { "Open Dialog" } %>
  <% end %>
  <%= render RubyUI::DialogContent.new(class: "bg-white") do %>
    <%= turbo_frame_tag :modal do %>
      <%= form_with url: user.new_record? ? workspace_team_members_path : workspace_team_member_path, method: user.new_record? ?  :post : :patch, scope: user, data: { controller: "show-on-value", show_on_value_accepted_value: project_restricted_roles } do |form| %>
        <div class="flex flex-col gap-y-4">
          <span class="font-semibold text-gray-600 text-lg"><%= t("common.edit_member") %>: <%= user.first_name ? user.name : user.email %></span>
          <%= render AlertComponent.new(variant: :destructive, title: t("alert.unable_to_proceed"), message: flash[:error]) if flash[:error].present?  %>

          <%= render RubyUI::FormField.new do %>
            <%= render RubyUI::FormFieldLabel.new { t("common.role") } %>
            <%= render RubyUI::FormFieldHint.new { t("common.select_organization_user") } %>
            <%= form.select :role, roles.map { |role| [t("access_info.role." + role), role] }, { prompt: t("common.select_role"), selected: selected_role }, required: true, class: "border-gray-200 rounded-md w-full", data: { show_on_value_target: "input" } %>
          <% end %>

          <%= render RubyUI::FormField.new(data: { show_on_value_target: "toggle" }) do  %>
            <%= render RubyUI::FormFieldLabel.new { t("common.projects") } %>
            <%= render RubyUI::FormFieldHint.new { t("common.add_projects_optional") } %>
            <%= render GroupedSelectMultipleComponent.new form, :project_ids, grouped_projects, :name, :id, :name, { checked: selected_project_ids }, label: t("common.select_projects") %>
          <% end %>

        </div>
        <%= render RubyUI::DialogFooter.new(class: "mt-4 pt-4 border-t border-gray-100") do %>
          <%= render ButtonComponent.new(variant: :outline, data: { action: 'click->dismissable#dismiss' }) { t("common.cancel") } %>
          <%= render ButtonComponent.new(type: :submit) { t("common.save") } %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>
